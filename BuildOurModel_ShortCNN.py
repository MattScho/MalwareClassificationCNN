from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM, Dropout, Conv1D, AveragePooling1D, Flatten, MaxPool1D, MaxPooling1D
from dataUtilities import callStreamToBinaryVectors, labelsToBinaryVectors
import pickle as pkl
import numpy as np
from tensorflow.keras.models import load_model

'''
Bring in data
'''
PATH_TO_ENCODER = "encoder.pkl"

# Short
PATH_TO_SHORT_CALLS_TRAIN = "ShortCalls80_2000.pkl"
PATH_TO_SHORT_LABELS_TRAIN = "ShortLabels80_2000.pkl"

# All
PATH_TO_ALL_CALLS_TRAIN = "AllCalls80_2000.pkl"
PATH_TO_ALL_LABELS_TRAIN = "AllLabels80_2000.pkl"


# Load in data
shortCallsTrainRaw = pkl.load(open(PATH_TO_SHORT_CALLS_TRAIN, 'rb'))
shortLabelsTrainRaw = pkl.load(open(PATH_TO_SHORT_LABELS_TRAIN, 'rb'))

allCallsTrainRaw = pkl.load(open(PATH_TO_ALL_CALLS_TRAIN, 'rb'))
allLabelsTrainRaw = pkl.load(open(PATH_TO_ALL_LABELS_TRAIN, 'rb'))

encoder = pkl.load(open(PATH_TO_ENCODER, 'rb'))

# Format Data
shortCallsTrain = callStreamToBinaryVectors(shortCallsTrainRaw, 2000)
shortLabelsTrain = labelsToBinaryVectors(shortLabelsTrainRaw, encoder)

allCallsTrain = callStreamToBinaryVectors(allCallsTrainRaw, 2000)
allLabelsTrainRaw = labelsToBinaryVectors(allLabelsTrainRaw, encoder)

# Define Model
model = Sequential()
model.add(Conv1D(filters=64, kernel_size=10, activation='relu', input_shape=(2000, 279)))
model.add(AveragePooling1D(pool_size=2))
model.add(Flatten())
model.add(Dense(50, activation='relu'))
model.add(Dense(8, activation='softmax'))
model.compile(loss='categorical_crossentropy',
              optimizer="adam")
print(shortCallsTrain.shape)
# Train Short Model
for i in range(10):
    model.fit(shortCallsTrain, shortLabelsTrain, epochs=10)
    model.save('ShortModels/OurModels/OurModel_A_' + str(i) + '.h5')

