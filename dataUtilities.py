import numpy as np

'''
Converts an API call to a categorical binary vector
'''
def _callVectorMaker(t):
    out = np.zeros(279)
    np.put(out, t, 1)
    return out

'''
Converts a call stream to a stream of categorical binary vectors
'''
def callStreamToBinaryVectors(callStreams, reqLen):
    paddingVector = _callVectorMaker(0)
    outCalls = []
    for callstream in callStreams:
        temp = [_callVectorMaker(c) for c in callstream]
        for _ in range(reqLen - len(temp)):
            temp.append(paddingVector)
        temp = np.array(temp, dtype=np.float32)
        outCalls.append(np.reshape(temp, (reqLen, 279)))
    return np.array(outCalls, dtype=np.float32)

'''
Convert a call stream to numpy array w/o categorical vectors
'''
def callStreamToVectors(callStreams, reqLen):
    padding = 0.0
    outCalls = []
    for callStream in callStreams:
        temp = [float(c) for c in callStream]
        for _ in range(reqLen - len(temp)):
            temp.append(padding)
        temp = np.array(temp, dtype=np.float32)
        outCalls.append(temp)
    return np.array(outCalls)

'''
Transform a list of label vectors to categorical binary vectors
'''
def labelsToBinaryVectors(labels, encoder):
    return encoder.transform(labels)

