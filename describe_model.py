from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, LSTM, Dropout, Conv1D, AveragePooling1D, Flatten, MaxPool1D
from dataUtilities import callStreamToBinaryVectors, labelsToBinaryVectors
import pickle as pkl
import numpy as np
from tensorflow.keras.models import load_model
from tensorflow.keras.utils import plot_model
from sklearn.metrics import confusion_matrix, accuracy_score, f1_score

'''
Bring in data
'''
PATH_TO_ENCODER = "encoder.pkl"
PATH_TO_MODEL = "ShortModels/OurModels/A/OurModel_A_10.h5"

# Short
PATH_TO_SHORT_CALLS_TEST = "ShortCalls_20_2000.pkl"
PATH_TO_SHORT_LABELS_TEST = "ShortLabels_20_2000.pkl"

# All
PATH_TO_ALL_CALLS_TEST = "AllCalls_20_2000.pkl"
PATH_TO_ALL_LABELS_TEST = "AllLabels_20_2000.pkl"


# Load in data
shortCallsTestRaw = pkl.load(open(PATH_TO_SHORT_CALLS_TEST, 'rb'))
shortLabelsTestRaw = pkl.load(open(PATH_TO_SHORT_LABELS_TEST, 'rb'))
print(len(pkl.load(open("ShortCalls80_2000.pkl", 'rb'))))
print(len(shortLabelsTestRaw))
allCallsTestRaw = pkl.load(open(PATH_TO_ALL_CALLS_TEST, 'rb'))
allLabelsTestRaw = pkl.load(open(PATH_TO_ALL_LABELS_TEST, 'rb'))

model = load_model(PATH_TO_MODEL)
encoder = pkl.load(open(PATH_TO_ENCODER, 'rb'))

# Format Data
# Short Mode
shortCallsTest = callStreamToBinaryVectors(shortCallsTestRaw, 2000)
shortLabelsTest = labelsToBinaryVectors(shortLabelsTestRaw, encoder)

# All Mode
# allCallsTest = callStreamToBinaryVectors(allCallsTestRaw, 2000)
# allLabelsTest = labelsToBinaryVectors(allLabelsTestRaw, encoder)


# Create graphic
'''
Commented out the line below if you are having trouble running this as
the line below requires additional software to be installed.
GraphViz must be installed and added to Path.
'''
plot_model(model, to_file='model.png')

# Compute Metrics

# Short Mode
prediction = model.predict(shortCallsTest)
true_labels = encoder.inverse_transform(shortLabelsTest)

# All Mode
# predication = model.predict(allCallsTest)
# true_labels = encoder.inverse_transform(allLabelsTest)

pred_labels = encoder.inverse_transform(prediction)
print("Model Accuracy")
print(accuracy_score(true_labels, pred_labels))
print("Confusion Matrix")
print(confusion_matrix(true_labels, pred_labels))

print(accuracy_score(true_labels, pred_labels))
print(f1_score(true_labels, pred_labels, average='macro'))
print(f1_score(true_labels, pred_labels, average='micro'))
print(f1_score(true_labels, pred_labels, average='weighted'))
print()
