from dataUtilities import callStreamToVectors, labelsToBinaryVectors
import pickle as pkl
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, f1_score
from sktime.classifiers.frequency_based.rise import RandomIntervalSpectralForest
from sklearn.svm import SVC
from sklearn.naive_bayes import GaussianNB
from sklearn.neighbors import KNeighborsClassifier

'''
Bring in data
'''
PATH_TO_ENCODER = "encoder.pkl"

# Short
PATH_TO_SHORT_CALLS_TRAIN = "ShortCalls80_2000.pkl"
PATH_TO_SHORT_LABELS_TRAIN = "ShortLabels80_2000.pkl"
PATH_TO_SHORT_CALLS_TEST = "ShortCalls_20_2000.pkl"
PATH_TO_SHORT_LABELS_TEST = "ShortLabels_20_2000.pkl"


# Load in data
shortCallsTrainRaw = pkl.load(open(PATH_TO_SHORT_CALLS_TRAIN, 'rb'))
shortLabelsTrainRaw = pkl.load(open(PATH_TO_SHORT_LABELS_TRAIN, 'rb'))

shortCallsTestRaw = pkl.load(open(PATH_TO_SHORT_CALLS_TEST, 'rb'))
shortLabelsTestRaw = pkl.load(open(PATH_TO_SHORT_LABELS_TEST, 'rb'))

encoder = pkl.load(open(PATH_TO_ENCODER, 'rb'))

# Format Data
shortCallsTrain = callStreamToVectors(shortCallsTrainRaw, 2000)
shortLabelsTrain = labelsToBinaryVectors(shortLabelsTrainRaw, encoder)

shortCallsTest = callStreamToVectors(shortCallsTestRaw, 2000)
shortLabelsTest = labelsToBinaryVectors(shortLabelsTestRaw, encoder)


# Define Model
models = {
    "RFC": RandomForestClassifier(),
    #"Logistic Regression": LogisticRegression(max_iter=10000),
    #"KNN n=3": KNeighborsClassifier(n_neighbors=3),
    #"KNN n=5": KNeighborsClassifier(n_neighbors=5),
    #"KNN n=7": KNeighborsClassifier(n_neighbors=7),
    #"Naive Bayes": GaussianNB(),
    #"SVM": SVC(max_iter=10000),
}

for k in models.keys():
    model = models[k]
    model.fit(shortCallsTrain, shortLabelsTrainRaw)
    pred = model.predict(shortCallsTest)
    print(k)
    print(pred)
    print(accuracy_score(pred, shortLabelsTestRaw))
    print(f1_score(pred, shortLabelsTestRaw,average='macro'))
    print(f1_score(pred, shortLabelsTestRaw,average='micro'))
    print(f1_score(pred, shortLabelsTestRaw,average='weighted'))
    print()
